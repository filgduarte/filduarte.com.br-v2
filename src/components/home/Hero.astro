---
    import AnimatedTitle from "../AnimatedTitle.astro";
---

<section id="hero">
    <div class="container grid">
        <AnimatedTitle className="grid-element-12-col" delay="0.3">
            Designer<br>
            & Developer.
        </AnimatedTitle>
        <h2 class="grid-element-4-col">
            Olá, meu nome é Filipe Duarte!<br>
            Eu torno ideias em <strong>designs atraentes</strong> e então transformo esses designs em <strong>sites funcionais e responsivos.</strong>
        </h2>
        <a href="#" class="button button--primary grid-element-3-col">Entre em contato</a>
    </div>
</section>

<style>
    section {
        padding-top: var(--header-height);
        height: 100vh;
        z-index: 2;
    }

    section .container {
        grid-template-rows: 72.5% auto;
        align-items: end;
        height: 100%;
    }

    h1 {
        margin: 0 0 0 -0.6rem;
        font-size: min(8rem, 15vw);
        font-weight: 600;
        line-height: 1;
        letter-spacing: -3px;
    }

    h2 {
        margin: 0 0 -0.35rem;
        max-width: 360px;
        font-size: 1.25rem;
        font-weight: 400;
        line-height: 1.3;
    }

    a {
        --_column-start: 10;
    }
</style>

<script>
    import { gsap } from "gsap";
    import { ScrollTrigger } from 'gsap/ScrollTrigger';
    import SplitType from "split-type";

    gsap.registerPlugin(ScrollTrigger);

    const subtitle = new SplitType('#hero h2', { types: 'chars' });
    const heroButton = document.querySelector('#hero .button');
    const timeline = gsap.timeline({
        delay: 0.3,
    });

    timeline
        .from(subtitle.chars, {
            opacity: 0,
            duration: 0.5,
            stagger: 0.01,
        }, "<");

    ScrollTrigger.create({
        trigger: '#home',
        pin: '#hero .button',
        pinSpacing: false,
        start: 'top top',
        endTrigger: '.submit-container button',
        end: () => {
            return `bottom +=${heroButton.offsetTop + heroButton.offsetHeight}`;
        },
        onToggle: self => {
            heroButton.style.visibility = self.isActive ? 'visible' : 'hidden';
        },
    });
</script>