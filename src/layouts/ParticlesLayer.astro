---
    const {depth, speed} = Astro.props;
---

<div class={`particles layer layer--${depth}`} data-speed={speed}>
    <slot />
</div>

<style is:global>
    .particles {
        --_particles-base-size: 100px;
        --_color-particles: var(--_theme-color-accent);

        transform: translateY(var(--_y, 0));
    }

    .layer {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        pointer-events: none;
    }

    .layer--far {
        opacity: 0.5;
        z-index: 0;
    }

    .layer--close {
        z-index: 3;
    }

    .layer--closest {
        z-index: 4;
    }

    .layer div {
        --_animation-duration: 10s;

        position: absolute;
        top: var(--_top, auto);
        right: var(--_right, auto);
        bottom: var(--_bottom, auto);
        left: var(--_left, auto);
        background-color: rgb( var(--_theme-color-accent-rgb) / 0.75 );
        background-image:
            var(--_theme-noise-background),
            linear-gradient(135deg, rgb( var(--_theme-color-background-rgb) / 0.75 ), transparent);
        transform-origin: 0 0;
        scale: var(--_scale, 1);
        animation: float var(--_animation-duration) ease-in-out infinite;
        animation-delay: var(--_delay, 0);
    }

    .layer--far * {
        --_scale: 0.2;
    }

    .layer--closest * {
        --_scale: 2;
    }

    /* .layer--close *,
    .layer--closest * {
        backdrop-filter: blur(2px);
    } */
</style>

<script>
    import { gsap } from 'gsap';
    import { ScrollTrigger } from 'gsap/ScrollTrigger';
    
    const particlesLayers = document.querySelectorAll('.layer');
	const particlesElements = document.querySelectorAll('.layer div');

	function setLayersHeight(layers) {
		const pageHeight = Math.max(
			document.body.scrollHeight,
			document.body.offsetHeight,
			document.documentElement.clientHeight,
			document.documentElement.scrollHeight,
			document.documentElement.offsetHeight
		);

		for (const layer of layers) {
			const parallaxSpeed = parseFloat(layer.dataset.speed) ?? 0;
			layer.style.height = (pageHeight * parallaxSpeed) + 'px';
		}
	}

	function setParticlesDelay(particles) {
		for (const particle of particles) {
			const duration = getComputedStyle(particle).getPropertyValue('animation-duration');
			const delay = parseInt(duration) * Math.random() * -1;
	
			particle.style.setProperty('--_delay', delay + 's');
		}
	}

    setLayersHeight(particlesLayers);
	setParticlesDelay(particlesElements);

    gsap.registerPlugin(ScrollTrigger);
    gsap.to('.layer', {
        scrollTrigger: {
            scrub: true
        },
        y: (i, target) => -ScrollTrigger.maxScroll(window) * target.dataset.speed,
        ease: 'none'
    });
</script>